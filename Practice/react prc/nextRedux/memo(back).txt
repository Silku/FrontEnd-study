const http = require('http')
const server = http.createServer((req,res)=>{
    res.end('hello')
})
server.listen(8080, ()=>{
    console.log('서버실행 ..')
});


[1] .express
app.get
app.post //생성 
app.delete
app.put  //전체수정
app.patch //부분수정
app.options //찔러보기(?)
app.head // 헤더만 가져오기(Headers/body)

※ swagger : api문서를 만들때 도와주는 툴
const express = require('express')

const app = express();

app.get('/', (req,res)=>{
    res.send('hello express')
})

app.listen(3300, ()=>{
    console.log('서버실행중...')
});

[1-2] rotuer 분리하기
불러올 파일 app.js에서 app.use()에서 '/post' 를 프리픽스로 붙여주면
post.js에서 route로 동작하는 코드를 '/'로 해줘도 정상적으로 불러올수 있음

파일 : app.js ..
const postRouter = require('./routes/post')
app.use('/post', postRouter);

파일 : routes/post.js
const express = require('express')
const router = express.Router();

router.post('/', (req,res)=>{
    res.json([
        {id:1 , content:'hello1'},
        {id:2 , content:'hello2'},
        {id:3 , content:'hello3'}
    ])  
})

router.delete('/', (req,res)=>{
    res.send({id:1})
})

module.exports = router;


[2] Sequelize / mySQL
mysql workbench
npm i sequelize sequelize-cli //js로 sql을 조작하게해주는 라이브러리
npm i mysql2   //node랑 mysql을 연결해주는 드라이버

npx sequelize init //시퀄라이즈 세팅 명령어
config/models/migrations/seeders 생성

config/config.js 설정
{
  "development": {
    "username": "root",
    "password": 0000,
    "database": "nodeboard",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": 0000,
    "database": "nodeboard",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": 0000,
    "database": "nodeboard",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

사용자 정보 저장할 user.js 작성 :
sequelize에서는 database table을 model로 부름

데이터 관계에 대한 로직은 associate()에 작성
Post.associate = (db) =>{
    db.Post.belongsTo(db.User)     // belongsTo (속해있다. 게시글은 유저에 속해있는거니까, belongsTo를 쓰면 나중에 db에 UserId, PostId등이 삽입됨)
    db.Post.belongsToMany(db.Hashtag); //belongsToMany(다대다 관계)
    db.Post.hasMany(db.Comment); ////hasMany(1:N관계, 여러개 가질수있다. 게시글에 여러 댓글이 달릴수있다.)
    db.Post.belongsToMany(db.User, {through : 'Like' ,as : 'Likers'});  

    db.User.belongsToMany(db.User, {through : 'Follow', as : 'Followers', foreignKey : 'FollowingId'});
    db.User.belongsToMany(db.User, {through : 'Follow', as : 'Followings', foreignKey : 'FollowerId'});
    //throught : N:N관계일경우 중간테이블의 이름,  
    //as : db.User면 중복이기때문에 Likers로 바꿔 저장되게끔
    //foreignKey : 컬럼내에서의 관계를 정하기 위해 사용
};

N : N 관계이면 중간테이블이 생긴다.


시퀄라이즈로 DB생성 
npx sequelize db:create
config.json에 int들어가면 안된다 전부 다 string으로만 설정!


// 아래 주석처리는  sequelize에서 자동으로 생성하는 형식 =>  
// belongsTo 는 단수형, belongsToMany는 복수형 등등..
db.Post.belongsTo(db.User) //post.addUser , post.getUser , post.setUser
db.Post.belongsToMany(db.Hashtag, {through : 'PostHashtag'});
db.Post.hasMany(db.Comment); //post.addComments, post.getComments
db.Post.hasMany(db.Image); //post.addImages , post.getImages
db.Post.belongsToMany(db.User, {through : 'Like' ,as : 'Likers'});  //post.addLikers, post.removeLikers


req/res.. 
헤더(상태 , 용량, 시간, 형식 쿠키 등)와
바디(데이터)로 구성되있음

status(상태) 
200 / 성공
300 / 리다이렉트
400 / 클라이언트 에러
500 / 서버에러 


CRUD 정리
========================================== 
create() 생성 
findOne(), findAll() 읽기

// 게시글 작성
router.post('/', isLoggedIn, async (req,res ,next)=>{ //Post/post
    try{
        const post = await Post.create({
            content : req.body.content,
            UserId : req.user.id,
        })
        
        const fullPost = await Post.findOne({
            where:{id:post.id},
            include : [{
                model : Image,
            },{
                model : Comment, 
                include : [{
                    model : User,//댓글 작성자
                    attributes : ['id', 'nickname'], 
                }]
            },{
                model : User, //게시글작성자
                attributes : ['id', 'nickname'],
            },{
                model : User, //좋아요 누른 사람
                as : 'Likers', //(model: post)에서 Likers라고 생성해준대로 가져와야됨
                attributes : ['id',]
            }]
        })
        res.status(201).json(fullPost);
    }catch(err){
        console.error(err)
        next(err)
    }
})



----------------
destroy() 삭제


router.delete('/:postId', isLoggedIn, async (req,res)=>{
    try{
        await Post.destroy({
            where:{id: req.params.postId},
            UserId : req.user.id, //내 아이디(조건)
        })
        res.status(200).json({PostId:req.params.postId})
    }catch(err){
        console.error(err)
    }
})

----------------
update() 수정 


router.patch('/nickname' , isLoggedIn, async(req,res)=>{
    try{
        await User.update({
            nickname:req.body.nickname,
        },{
            where : {id : req.user.id},
        })
        res.status(200).json({nickname:req.body.nickname})
    }catch(err){
        console.error(error)
        next(err)
    }
})



[3] cross origin resource sharing
브라우저에서 발생하는 문제 ..
서버-서버간의 통신에는 발생하지 않음.
ex )
브라우저(port :3060)
프론트서버(port :3060)
백엔드서버(port : 3065)
라고 할때 
Proxy방식 : 브라우저랑 프론트서버가 port가 같으므로 브라우저->프론트->백엔드서버로 요청/응답을 되돌려주는 방식으로 
cors를 피해갈수 있음

서버단에서 아래와 같이 설정
res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3060')
혹은 모두허용 : res.setHeader('Access-Control-Allow-Origin', '*')

또는 ..
app.js에 적용하면 더 쉬움..
npm i cors
app.use(cors(
    origin : '*', //모두허용
    credentials : true, //쿠키 허용
))

saga에서 비동기 요청 보낼때...
axios.post('/post', data, {
  withCredentials: true
})

withCredentials 뜻 : 서로 다른 도메인(크로스 도메인)에 요청을 보낼 때 요청에 credential 정보를 담아서 보낼 지를 결정
credential : 1.쿠키를 첨부해서 보내는 요청, 2.헤더에 Authorization 항목이 있는 요청

saga/index.js에서..
axios.defaults.withCredentials = true;
위처럼 해주면 항상 credential이 true로 가지게끔 설정해줄수있는데, 
node에서는 cors 전부허용이 안됨. (origin : '*')  =>
app.use(cors({
    origin: true, //또는 프론트서버 주소입력 origin: 'http://localhost:8080/' 
    credentials : true,
}))

** 요청이 get, delete 일경우 withCredentials는 항상 붙여줘야함
axios.get('/user', data, {
  withCredentials: true
})



[4] bcrypt
비밀번호 암호화 라이브러리
npm i bcrypt 

const hashedPassword = await bcrypt.hash(req.body.password, 10) 
//암호화하는 해시숫자 : 10~13정도 씀, 높을수록 강력하나 고사양 요구
await User.create({
        email : req.body.email,
        nickname : req.body.nickname,
        password : hashedPassword,
    })

[5]로그인 기능 구현
baseURL 설정
sagas/index.js...
import axios...
axios.defaults.baseURL = 'http://localhost:3065'
baseURL 설정해주면 axios로 처리하는 url에 기본값을 설정할 수있음.

ex)
function loginAPI(data){
    return axios.post('http://localhost:3065/user/login',data)
}

ex)baseURL 설정후
function loginAPI(data){
    return axios.post('/user/login',data)
}

[5-1] passport / passport-local 
https://www.npmjs.com/package/passport
로그인 관련 도구/ 구글,네이버,카카오 로그인등..
passport-local은 email로그인 등 지원
npm i  passport
npm i  passport-local

기본 코드
const passport = require('passport')
const local = require('./local')

module.exports = () =>{
    passport.serializeUser(()=>{

    })
    passport.deserializeUser(()=>{

    })
}

serializeUser() : 사용자 정보, 쿠키를 저장
deserializeUser() : 쿠키에 저장된 connect.sid값으로 부터 일치하는 사용자 정보를 찾고 httpRequest를 돌려줌 (로그인 이후 활동시(?))


[5-2] 세션/쿠키
npm i express-session
npm i cookie-parser



[5-3] dotenv
비밀 키 관리
npm i dotenv

const dotenv = require('dotenv')
dotenv.config();

비밀키 입력할곳 : process.env.비밀키


[6] 브라우저 관련...

[6-1] 브라우저 새로고침시 로그인이 풀리는 현상..
개발자도구-application-cookies에 프론트서버 url을 확인하면 connect.sid라는 쿠키/세션 값을 갖고있음.
즉 connect.sid값을 서버로 전달만 해주면 로그인이 된 상태가 될 수 있음.

**reducer든 node/routes든 실행순서에 주의하자..



[7] images처리
multipart...

npm i multer
파일 업로드 관련 모듈


// 이미지 업로드

//프론트
<input  type='file'  multiple style={{display:'none'}} ref={imageInput} onChange={onChangeImages}/>

const onChangeImages = useCallback((e)=>{
    console.log('images', e.target.files);
    const imageFormData = new FormData(); //formData를 쓰면 multipart형식으로 보낼수 있고 multer가 처리가능
    [].forEach.call(e.target.files, (f)=>{
        imageFormData.append('imageKeyValue', f)
        //append('키', 밸류) 여기의 키값이랑 multer의 upload.array('키') 키값이 일치해야함.
    })
    dispatch({
        type:UPLOAD_IMAGES_REQUEST,
        data:imageFormData,
    })
},[])

const upload = multer({
    // 하드디스크에 저장
    storage:multer.diskStorage({
        destination(req,file,done){
            done(null, 'uploads')
        },
        filename(req,file,done){ //사과.png
            const ext = path.extname(file.originalname); //확장자추출(.png)
            const basename = path.basename(file.originalname, ext) //사과
            done(null, basename + new Date().getTime() + ext) //사과2212300101.png
        }
    }),
    limits : {fileSize:20*1024*1024} //20mb
});
router.post('/images', isLoggedIn, upload.array('imageKeyValue'), async(req,res,next)=>{//POST, /post/images
    // upload.single , 하나올리기
    // upload.array , 여러개 올리기
    // upload.none , 이미지 안올림, 텍스트만 올린다 할때
    // upload.fields, 파일 인풋박스 자체가 여러개일떄

} )


// [TIPS]
PostForm.js 
함수안에 매개변수 넣는 식으로 쓸떄...
<Button onClick={onRemoveImage(i)}>삭제</Button>

//아래처럼 고차함수 활용하기
const onRemoveImage = useCallback((index) => () =>{
    dispatch({
        type:REMOVE_IMAGE,
        data:index,
    })
},[])


[8] node Hashtag

//post.js ... router.post('/') ...
const hashTags = req.body.content.match( /#[^\s#]+/g);
if(hashTags){
    // findOrCreate : db에 있으면 가져오고 없으면 생성
    // slice()로 #을 떼고 toLowerCase로 대소문자 구분없이 소문자로 치환
    const result = await Promise.all(hashTags.map((tag) => Hashtag.findOrCreate({
        //여기서 content는 db의 컬럼명..
        where : {content:tag.slice(1).toLowerCase()},
    })));
    await post.addHashtags(result.map((v) => v[0]))
}


trim() // 텍스트 양쪽 끝의 공백을 지워줌
ex ) text.trim();


[9] 쿼리스트링..
sagas/post.js..

// 쿼리스트링 방식 , 주소에 데이터를 포함,
// get쓸때 2번째 인자에는 withCredentials.. 가 들어가서 데이터를 못넣는데 쿼리스트링방식으로 데이터를 직접 넣는 방식임
/*
    예시 : `/posts?lastId=${lastId}&limit=10&offset=10`
    url의 ? 뒤에 lastId=${lastId} , key=value 형식으로 넣고,
    & 로 구분지어줌
*/ 
function loadPostsAPI(lastId){
    // lastId가 undefined일경우, 0이 되도록
    // pages/index.js에서 const lastId = mainPosts[mainPosts.length-1]?.id 처럼 lastId값이 없으면 undefined가 되도록 설정했기 때문에..
    return axios.get(`/posts?lastId=${lastId || 0}`)
}


[back/route 설정 ..]
//operator Op를 불러와주고.. (op는 $lt 같은걸 쓸 경우 보안에 안 좋아서 대신 사용하는 모듈)
//예를들면 SQL injection
const {Op} = require('sequelize') 

//where에 조건을 줘서 findAll에 넣는 형태
const where = {};
if (parseInt(req.query.lastId, 10)) { // 초기 로딩이 아닐 때
    where.id = { [Op.lt]: parseInt(req.query.lastId, 10)}
} // 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1


const posts = await Post.findAll({
    where,



[DB (mysql관련..)]
//DB 조작할떄는 await 붙인다고 보면 됨. 
const posts = await Post.findAll({
    // where : {Userid : 1}

    order : [['createAt', 'DESC']], // 게시글 생성일, 내림차순(최신글)

    //offset으로 게시물 갯수 제어하는 방식은 잘 안쓴다. 누군가 게시글 추가/삭제했다면 꼬여버릴수 있기때문
    limit : 5, //불러올 게시글 제한
    offset : 0, //0 : 1~10번게시글...,  10 : 11~20번 게시글
})



[10] next 9버전 이상 사용법

[10-1] Next.js의 데이터 패칭 방식 : 

getStaticProps : 유저의 요청마다 fetch할 필요가 없는 고정된 내용의 페이지를 렌더링할 때,

getStaticPath : 어떤 페이지를 미리 Static으로 빌드할 지 정하는 api로, getStaticProps + 동적라우팅이 필요할 때 적합,

getServerSideProps : 자주 변경되는 페이지로, 페이지를 렌더링하기전에 반드시 fetch해야 할 데이터가 있을 때 사용
(성능이 매우 떨어지므로 꼭 필요할때 사용)


pages/index.js
(1) getServerSideProps : 
페이지가 렌더 되기전에 데이터를 pre-rendering을 해주는 역할
getServerSideProps를 실행시키면 reducer에있는 HYDRATE가 실행. 

아래와 같이 씀...
import wrapper from "../store/configureStore";
import { END } from "redux-saga";
export const getServerSideProps = wrapper.getServerSideProps(async (context) =>{ 
    context.store.dispatch({
		type: LOAD_MY_INFO_REQUEST,
	});
    // 아래 END 액션과 sagaTask..부분 넣어줘야 req에서 끝나는게 아니라 응답까지 돌아옴
	store.dispatch(END);
	await store.sagaTask.toPromise();
});

[10-2] next를 사용할떄 서버간 통신의 문제점
기존 방식(브라우저 -> 백엔드로 데이터를 보낼때)은 Access-Control-Allow-Origin, withCredentials과 같은 부분을 
브라우저가 어느정도 해결해 주는 부분이 있는데,
getServerSideProps를 통해 프론트서버 -> 백엔드서버로 데이터를 전송할떄 직접 쿠키를 전달하는 로직을 써줘야함.

//아래와 같이 사용
export const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req }) => {
    //서버에서 실행되면 context.req라는게 존재함. 따라서, axios.defaults.headers.Cookie = cookie;와 같이 요청을 보냄.
	const cookie = req ? req.headers.cookie : '';
	axios.defaults.headers.Cookie = '';
	if (req && cookie) {
		axios.defaults.headers.Cookie = cookie;
	}

    /**!!매우 중요한 포인트!!
        getServerSideProps 이 부분이 서버에서 실행된다는 점이 매우 중요 ,
        예를들어 aws서버에 axios.defaults.headers.Cookie = cookie;로 되어있으면
        다른 사람이 접속했는데 내 쿠키의 정보가 공유되는 불상사가 발생할 수 있음.
        따라서 서버일때,쿠키일때라는 조건을 주고 if (req && cookie) {}
        기본적으로는 axios.defaults.headers.Cookie = '';로 서버에서 공유하는 쿠키를 지워주기
    **/
.......


[10-3] 다이나믹 라우팅
pages에서..
post폴더/[id].js로 파일을 생성
아래처럼 해주면 /post/1로 들어가면
1번 게시글이라는 텍스트를 확인가능

const Post = () => {
	const router = useRouter();
	const { id } = router.query;

    return(
        <div>{id}번 게시글</div>
    )
}

---------------------------
getServerSideProps, getStaticProps에서 
context.params.id 로 써주면 위의 const { id } = router.query;와 동일한 기능으로 사용할수 있음

store.dispatch({
    type: LOAD_POST_REQUEST,
    data: params.id,
});

[10-4] SSR시 stlyedComponent렌더링 기법

1.npm i babel-plugin-styled-components

2.
.bablerc 생성 후 아래와 같이 설정
{
	"presets": ["next/babel"],
	"plugins": [
		["styled-components", {
			"ssr": true,
			"displayName": true
		}]
	]
}


3.pages/_document.js 생성

import React from 'react';
import Document, { Html, Head, Main, NextScript } from 'next/document';
import { ServerStyleSheet } from 'styled-components';

export default class MyDocument extends Document {
	static async getInitialProps(ctx) {
		const sheet = new ServerStyleSheet();
		const originalRenderPage = ctx.renderPage;
		try {
			ctx.renderPage = () => originalRenderPage({
				enhanceApp: (App) => (props) => sheet.collectStyles(<App {...props} />),
			});
			const initialProps = await Document.getInitialProps(ctx);
		return {
				...initialProps,
				styles: (
				<>
					{initialProps.styles}
					{sheet.getStyleElement()}
				</>
				),
		};
		} catch (error) {
			console.error(error);
		} finally {
			sheet.seal();
		}
	}
	render() {
		return (
			<Html>
				<Head />
				<body>
				<Main />
				<NextScript />
				</body>
			</Html>
		);
	}
}

[10-5] getStaticPath 

다이나믹라우팅일때 쓸 수 있음 ,getStaticProps랑 같이 사용하게 됨.
fallback은 true이면 params 외의 페이지를 로드할경우 에러는 안뜨는데 , SSR이 안됨.
false이면 params이외의 페이지는 에러

//post/[id].js
	// if (router.isFallback) {
	//   return <div>로딩중...</div>;
	// }

export async function getStaticProps(){
    const result = await axios.get('post/list')
    return {
        paths:[
            {params: {id:1}},
        ],
        fallback:false,
    }
}

[10-6] swr
SWR : next 라이브러리 
redux, redux-saga의 dispatch 대신 사용할 수있음.
npm i swr


pages/profile.js...

import useSWR from 'swr';

// fetcher대신 graphql도 쓸수 있음
const fetcher = (url) => axios.get(url, {withCredentials:true}).then((result)=> result.data);
...
const Profile = () => {
	const {data, error} = useSWR(`http://localhost:3065/user/follwers`, fetcher)
}

/*
여기서 return을 넣어 줄때 주의사항, hooks위에 이 코드가 있으면 
return 되어서 hooks가 실행이 안되므로 에러가 발생함.
return 되는 코드는 훅스가 다 실행된 다음 그 아래에 만들어 줘야한다. 
*/
if (followerError || followingError) {
    console.error(followerError || followingError);
    return <div>팔로잉/팔로워 로딩 중 에러가 발생합니다.</div>;
}


** 매우 중요 **
미들웨어를 사용할떄 주의점
back단 router에서 ..

router.get(`/:userId`) 처럼 params or 와일드카드 받는 부분..
이런 코드들은 router애서 최대한 아래로 내려주는게 좋다. 
예를들면 /user/1로 요청한거나  /user/follwer로 요청한거나 똑같이 인식해서 오작동할 수 있음.