# [1] install
npx create-next-app@latest

(+typescript)
npx create-next-app@latest --typescript


# [2] next.js 특징 
Framework, 파일 이름이나 구조 등을 정해진 규칙에 따라 만들고 따름

SSR을 통해 react의 CSR 개선
-> seo최적화, 서버에서 로딩함으로써 페이지 렌더되는데 걸리는 시간 단축
codeSplitting
파일기반 라우팅
경로기반 pre-fetching등

 =>

 1) 파일명에 따른 자동 라우팅
pages 폴더에 about.js라는 파일을 만들고 export default  ~~~ return 하면
 component명을 뭐라고 짓든 관계없이
/about 과 같이 url 주소창에 입력하면 자동으로 라우팅이 된다.
예외로 , index.js 의 경우 root


2) 리액트 컴포넌트를 만들기위한 import react from "react" 구문을 생략해도 문제 없다.


3) next Link
react-router-dom의 router과 같은 역할

13버전에 따른 변경점이 있는데 , 기존에는 아래와 같이 a태그를 삽입했지만 13버전에서는 a태그를 삽입하면 오류가 생기며, Link태그에 속성값을 넣을 수 있다.

nextjs v13이전 : 
<Link ><a className="hello"></a></Link>

nextjs v13이후 : 
<Link className="hello"></Link>


또는 a태그 쓰되, Link에 legacyBehavior 삽입하기
  <Link 
      href="/"
      legacyBehavior
      >
      <a className={router.pathname==="/" ? "active" : "" } >Home</a>
  </Link>
https://nextjs.org/docs/api-reference/next/link
https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor


4) useRouter
nextjs에서 제공하는 hooks 현재 페이지의 url 정보를 가져오는데 사용.
URL과 쿼리 매개변수, 라우트 매개변수 등의 정보를 쉽게 가져올 수 있음

import { useRouter } from "next/router";
const router = useRouter();
<Link  style={{color:router.pathname==="/about" ? "red" : "blue"}}href="/about">
    About
</Link>


5) nextjs에서 css입히기
module.css 
styled jsx (nextjs 고유)

<style jsx global>{`
  a{
    color:red
  }
`}</style>

기본적으로 jsx가 붙고 해당 div내에서 적용이됨.
global 속성을 붙여주면 해당 페이지 내에서 global임. 따라서 page를 이동했다면 css가 적용되지 않는 현상을 볼 수 있음


6)_app.js
1.전체 페이지에 공통적으로 적용되는 레이아웃 구성
2.페이지간의 상태 공유
3.데이터 가져오기



# [3] next.js 

## 패턴
[Layout pattern]

children은 nextjs에서 제공하는 props, 

import Navbar from './Navbar'

const Layout = ({children}) => {
	return (
		<>
			<Navbar/>
			<div>{children}</div>
		</>
	)
}

export default Layout


## 헤드
[Head] : 메타데이터 설정, title, description, autuor, link, script 등

import Head from "next/head";
  <Head>
    <title>About  | next Movies</title>
  </Head>



## next.config.js

- redirects, rewrites 설정하기
redirects -> URL변경됨
rewrites -> URL변경X

const nextConfig = {
	reactStrictMode: false
	async redirects() {
		return [
		{
			source: "/old-blog/:path*", //request가 들어오는 경로
			destination: "/new-sexy-blog/:path*", //redirect할 경로
			permanent: false, //영구성 설정, true이면 브라우저와 검색엔진에 redirect를 캐싱, false일 경우 일시적.
		},
		];
	},
	async rewrites() {
		return [
		{
			source: "/api/movies",
			destination: `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`,
		},
		];
	},
}
module.exports = nextConfig


## getServerSideProps
 - Next.js는 getServerSideProps에서 반환된 데이터를 사용하여 각 request에서 이 페이지를 pre-render합니다.
    getServerSideProps는 서버 측에서만 실행되며 브라우저에서는 실행되지 않습니다.

export async function getServerSideProps(){

} 


## Dynamic Routes
Next.js에서는 page에 대괄호([param])를 추가하여 Dynamic Route를 생성할 수 있다.

ex)
/movies/1, /movies/abc 등 같은 모든 경로를
=> 
pages/movies/[id].js 와 같이 만들어 줄 수 있음


### catch All Url
[...id]형식으로 다이나믹 라우팅시,
console.log(router)로 확인해 보면, query.id에 배열 형식으로 값이 들어온다.



## router.push(url, as, options)
라우터 처리, next/link로 충분하지 않은 경우에 유용하게 쓸 수 있다.

ex) 아래 코드 같은 경우 url 자리에 String 뿐만 아니라 object형식으로도 넣을 수 있고,
as 부분은 브라우저 url 표시줄에 해당 경로명으로 마스킹(지저분한 경로명을 감추게끔)을 시켜줄수 있다.

	const router = useRouter();
	const handleOnClick = (id, title) =>{
		//useRouter로 navigate하기
		router.push({
			pathname : `/movies/${id}`,
			query : {
				id,
				title
			}
		}, `/movies/${id}`)
	}


 

# error : 

[#error 1]: can't find module next/babel

root 폴더에 .babelrc 생성 후..
{
    "presets": ["next/babel"],
    "plugins": []
}

.eslintrc.json에는 다음과 같이 설정
{
  "extends": ["next/babel","next/core-web-vitals"]
}



[#error 2]: Invalid with child. Please remove or use 
next13버전 이후, Link 태그안에 a 태그를 쓸수 없다.
https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor



tmdb API (영화 데이터 API)
https://developers.themoviedb.org/3/movies/get-popular-movies