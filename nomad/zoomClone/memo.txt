# install 
npm i nodemon -D
git init
npm i @babel/core @babel/cli @babel/node -D
npm i @babel/preset-env -D
npm i express
npm i pug

##babel.config.json
{
    "presets": ["@babel/preset-env"]
}

##nodemon.json
{
    "exec" : "babel-node src/server.js"
}

## package.json
"dev": "nodemon" 
->
nodemon.json 에 있는 코드실행




# mvp css
https://unpkg.com/mvp.css


# ws (webSocket Library)
npm i ws

/* 
    문제 1. 프론트 app.js에서 아래 세팅했을때 blob으로 나오는 경우와 해결방법.

      "dependencies": {
        "ws": "^8.13.0"
     }
     이것을 7.5.3이하버전으로 다운그레이드한다.

     또는 
     
     서버쪽에서 보낼떄 utf-8로보내기.
        socket.on("message", (message)=>{
        socket.send(message.toString('utf-8'))
    })

*/
socket.addEventListener("message", (message) =>{
    console.log("서버응답 : ", message.data)
})



# socket 

## Server Side

=======================================
const wss = new WebSocket.Server()
 
wss.on("connection", (socket)=>{
    socket.on("close", ()=>{console.log("disconnected from the Browser")})
    socket.on("message", (message)=>{
        console.log(message.toString('utf-8'))
    })
    socket.send("hi")
})
=======================================

socket.on("event" , callback) : 이벤트리스너
socket.send(data)


## Client Side

=======================================
const myLocation = window.location.host //host location 정보
const socket = new WebSocket(`ws://${myLocation}`)


socket.addEventListener("open", ()=>{
    console.log("Connected to server ✅")
})

socket.addEventListener("message", (message) =>{
    console.log("서버응답 : ", message)
})

socket.addEventListener("close", ()=>{
    console.log("Disconnected to server ❌")
})

setInterval(()=>{
    socket.send("안녕하세요") // 매초 서버로 이렇게 보냄.
},1000)


# socket.IO
npm i socket.io
docs : https://socket.io/docs/v4/server-initialization/#with-express
Framework , 실시간,양방향,event기반 통신 제공


socketio 패키지 설치후, 
서버에서는 
const SocketIO = require("socket.io");
view에서는 이렇게 불러오면 됨.
<script src="/socket.io/socket.io.js"></script>



## methods..

socket.emit(event, [data], [callback]): 클라이언트에서 서버로 이벤트를 전송.
이벤트는 이름과 데이터를 가질 수 있으며, 필요한 경우 콜백 함수를 등록할 수도 있다.

socket.on(event, callback): 서버나 클라이언트에서 이벤트를 수신할 때 사용.
이벤트 이름과 처리 함수를 등록한다.

socket.join(room, [callback]): 클라이언트가 특정 방(room)에 참가할 수 있도록 함.
방 이름을 지정하고, 필요한 경우 콜백 함수를 등록할 수 있다.

socket.to(room).emit(event, data): 지정된 방에 연결된 모든 클라이언트에게 이벤트를 전송.

socket.leave(room, [callback]): 클라이언트가 방에서 나가도록 함.
방 이름을 지정하고, 필요한 경우 콜백 함수를 등록할 수 있음.

