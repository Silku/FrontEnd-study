[1] # install 
npm i nodemon -D
git init
npm i @babel/core @babel/cli @babel/node -D
npm i @babel/preset-env -D
npm i express
npm i pug

##babel.config.json
{
    "presets": ["@babel/preset-env"]
}

##nodemon.json
{
    "exec" : "babel-node src/server.js"
}

## package.json
"dev": "nodemon" 
->
nodemon.json 에 있는 코드실행




[2] # mvp css
https://unpkg.com/mvp.css


[3] #  ws (webSocket Library)
npm i ws

/* 
    문제 1. 프론트 app.js에서 아래 세팅했을때 blob으로 나오는 경우와 해결방법.

      "dependencies": {
        "ws": "^8.13.0"
     }
     이것을 7.5.3이하버전으로 다운그레이드한다.

     또는 
     
     서버쪽에서 보낼떄 utf-8로보내기.
        socket.on("message", (message)=>{
        socket.send(message.toString('utf-8'))
    })

*/
socket.addEventListener("message", (message) =>{
    console.log("서버응답 : ", message.data)
})



[4] # socket 

## Server Side

=======================================
const wss = new WebSocket.Server()
 
wss.on("connection", (socket)=>{
    socket.on("close", ()=>{console.log("disconnected from the Browser")})
    socket.on("message", (message)=>{
        console.log(message.toString('utf-8'))
    })
    socket.send("hi")
})
=======================================

socket.on("event" , callback) : 이벤트리스너
socket.send(data)


## Client Side

=======================================
const myLocation = window.location.host //host location 정보
const socket = new WebSocket(`ws://${myLocation}`)


socket.addEventListener("open", ()=>{
    console.log("Connected to server ✅")
})

socket.addEventListener("message", (message) =>{
    console.log("서버응답 : ", message)
})

socket.addEventListener("close", ()=>{
    console.log("Disconnected to server ❌")
})

setInterval(()=>{
    socket.send("안녕하세요") // 매초 서버로 이렇게 보냄.
},1000)


[5] # socket.IO
npm i socket.io
docs : https://socket.io/docs/v4/server-initialization/#with-express
Framework , 실시간,양방향,event기반 통신 제공


socketio 패키지 설치후, 
서버에서는 
const SocketIO = require("socket.io");
view에서는 이렇게 불러오면 됨.
<script src="/socket.io/socket.io.js"></script>



## methods..

socket.emit(event, [data], [callback]): 클라이언트에서 서버로 이벤트를 전송.
이벤트는 이름과 데이터를 가질 수 있으며, 필요한 경우 콜백 함수를 등록할 수도 있다.

socket.on(event, callback): 서버나 클라이언트에서 이벤트를 수신할 때 사용.
이벤트 이름과 처리 함수를 등록한다.

socket.join(room, [callback]): 클라이언트가 특정 방(room)에 참가할 수 있도록 함.
방 이름을 지정하고, 필요한 경우 콜백 함수를 등록할 수 있다.

socket.to(room).emit(event, data): 지정된 방에 연결된 모든 클라이언트에게 이벤트를 전송.

socket.leave(room, [callback]): 클라이언트가 방에서 나가도록 함.
방 이름을 지정하고, 필요한 경우 콜백 함수를 등록할 수 있음.

socket.onAny(callback) : 클라이언트에서 서버로 전송된 모든 이벤트를 수신하고,
이벤트를 처리하기 위해 등록된 콜백 함수를 호출


## Adapter 
어댑터는 모든 클라이언트 또는 클라이언트 하위 집합에 이벤트를 브로드캐스팅하는 서버 측 구성 요소.
room 등의 핵심기능을 확장하는 역할


ex)
const SocketIO = require("socket.io");
const io = SocketIO()
io.on("connection", socket =>{
    socket.onAny((e)=>{
        console.log(io.sockets.adapter)
    })
})

server에서 위의 코드를 실행시켰을때 콘솔에서 rooms, sids.. 와 같은 객체를 확인할수 있음



## adimin UI
Socket.IO 배포 상태에 대한 개요를 확인 툴
https://socket.io/docs/v4/admin-ui/
npm i @socket.io/admin-ui

const { instrument } = require("@socket.io/admin-ui"); 로 사용 ...docs 참조



[7] # Video Call 

## todos..
1.화면에 비디오 가져오기.
2.버튼 마이크 음소거, 카메라  


## getUserMedia
미디어 입력장치 권한 요청, 실행
https://developer.mozilla.org/ko/docs/Web/API/MediaDevices/getUserMedia

async function getMedia(constraints) {
  let stream = null;

  try {
    stream = await navigator.mediaDevices.getUserMedia(constraints);
    /* 스트림 사용 */
  } catch(err) {
    /* 오류 처리 */
  }
}


## enumerateDevices
사용 가능한 모든 미디어 입력 및 출력 장치에 대한 정보 호출

... navigator.mediaDevices.enumerateDevices()



[8] #webRTC (Real-Time Communication)
https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API

영상, 오디오, 텍스트 등 전송이 가능.
서버를 거치는 형식이 아닌 peer-to-peer, 클라이언트 간의 연결 형식을 가진다.
signaling 과정을 거쳐야함.
signaling : location , settings, configuration 방화벽,라우터 등등의 정보를 매개 해주는 역할


== RTC STEP == 

Peer A          ||          Signaling Server         ||         Peer B
        -> send Offer
                                                            <- send Answer





{
    "ignore" : ["src/public/*"],
    "exec" : "babel-node src/server.js"
}